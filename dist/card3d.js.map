{"version":3,"file":"card3d.js","sources":["../src/core/card3d.ts","../src/utils.ts","../src/core/attr-handler.ts","../src/index.ts","../src/core/observer.ts"],"sourcesContent":["import { findCardIndex } from \"utils\";\nimport Config from \"../types/config\";\nimport EventListener from \"../types/eventListener\";\n\nconst Card3dElements: { element: HTMLElement; instance: Card3d }[] = [];\n\nconst defaultConfig = {\n  delta: 10,\n  perspective: 500,\n  startX: 0,\n  startY: 0,\n  glareOpacity: 0.5,\n  axis: \"all\",\n  scale: 1,\n} as const satisfies Config;\n\nclass Card3d {\n  private glareElement: HTMLElement;\n  private focusElement: HTMLElement;\n\n  private gyroOrigin: { x: number; y: number } = null;\n\n  private eventMouseMoove: EventListener<MouseEvent>;\n  private eventMouseOut: EventListener<MouseEvent>;\n  private eventDeviceOrientation: EventListener<DeviceOrientationEvent>;\n\n  constructor(private card3dElement: HTMLElement, public config: Config = {}) {\n    Card3dElements.push({ element: card3dElement, instance: this });\n\n    this.config = Object.assign({}, defaultConfig, this.config);\n\n    if (!this.config.stop) this.start();\n    else this.stop();\n  }\n\n  /**\n   * Update config\n   * @param config\n   */\n  updateConfig(config: Config = {}) {\n    this.config = Object.assign({}, defaultConfig, config);\n\n    if (this.config.stop) {\n      this.stop();\n    } else {\n      this.stop();\n      this.start();\n    }\n  }\n\n  /**\n   * Remove all event listener of the card\n   */\n  private removeEventListener() {\n    this.focusElement.removeEventListener(\"mousemove\", this.eventMouseMoove);\n    this.focusElement.removeEventListener(\"mouseout\", this.eventMouseOut);\n    if (this.config.gyroscopie)\n      window.removeEventListener(\n        \"deviceorientation\",\n        this.eventDeviceOrientation\n      );\n  }\n\n  /**\n   * Set all necessary event listener\n   */\n  private setupEventListener() {\n    this.eventMouseMoove = (event: MouseEvent) => this.mousemove(event);\n    this.eventMouseOut = () => this.mouseout();\n\n    this.focusElement.addEventListener(\"mousemove\", this.eventMouseMoove);\n    if (!this.config.noReset) {\n      this.focusElement.addEventListener(\"mouseout\", this.eventMouseOut);\n    }\n\n    if (this.config.gyroscopie) {\n      this.eventDeviceOrientation = (event: DeviceOrientationEvent) =>\n        this.gyro(event);\n      window.addEventListener(\"deviceorientation\", this.eventDeviceOrientation);\n    }\n  }\n\n  /**\n   * Handle device orientation event\n   * @param event\n   * @returns\n   */\n  private gyro(event: DeviceOrientationEvent) {\n    const rotateZ = event.beta,\n      rotateX = event.gamma;\n\n    if (typeof rotateX !== \"number\" || typeof rotateZ !== \"number\") return;\n\n    this.mousemove({\n      clientY: rotateZ / 45,\n      clientX: rotateX / 45,\n      gyroscopie: true,\n    });\n  }\n\n  /**\n   * Remove the card from the list, set attribute stop and reset it\n   */\n  stop() {\n    const cardIndex = findCardIndex(this.card3dElement);\n    Card3dElements.splice(cardIndex, 1);\n    this.card3dElement.setAttribute(\"data-card3d-stop\", \"true\");\n    this.reset();\n  }\n\n  /**\n   * Reset the card style and remove event listener\n   */\n  reset() {\n    this.card3dElement.style.transform = \"\";\n    this.card3dElement.style.transition = \"\";\n\n    if (this.glareElement) this.glareElement.remove();\n\n    this.removeEventListener();\n  }\n\n  /**\n   * Apply the glare\n   */\n  applyGlare() {\n    this.glareElement = document.createElement(\"span\");\n    this.glareElement.setAttribute(\n      \"style\",\n      `\n        will-change: transform;\n        position: absolute;\n        background-image: linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%);\n        pointer-event: none; \n        transform-origin: 0% 0%;\n        transform: translate(-50%, -50%) rotate(180deg);\n        opacity: 0;\n        z-index: 999;\n        `\n    );\n    this.card3dElement.appendChild(this.glareElement);\n  }\n\n  /**\n   * Init the card by setting event and creating glare effect\n   */\n  start() {\n    this.focusElement = this.config.fullPageListening\n      ? document.body\n      : this.card3dElement;\n\n    this.setupEventListener();\n    if (this.config.glare) this.applyGlare();\n\n    this.card3dElement.style.overflow = \"hidden\";\n    this.card3dElement.style.willChange = \"transform\";\n    this.card3dElement.style.transform = `\n        perspective(500px) \n        rotateX(${this.config.startY}deg) \n        rotateY(${this.config.startX}deg)\n        `;\n  }\n\n  /**\n   * Event that handle all mouse event\n   * @param event\n   * @returns\n   */\n  private mousemove(\n    event:\n      | MouseEvent\n      | { clientX: number; clientY: number; gyroscopie: boolean }\n  ) {\n    if (!this.card3dElement.isConnected || !this.focusElement.isConnected) {\n      this.stop();\n      return;\n    }\n\n    this.card3dElement.style.transition = \"\";\n\n    const config = this.config;\n    const reverse = config.reverse ? 1 : -1;\n\n    const rect = this.card3dElement.getBoundingClientRect();\n\n    const middleWidth = rect.width / 2;\n    const middleHeight = rect.height / 2;\n    const middleX = rect.left + middleWidth;\n    const middleY = rect.top + middleHeight;\n\n    const x = (middleX - event.clientX) * -1;\n    const y = middleY - event.clientY;\n\n    const width =\n      this.focusElement !== this.card3dElement\n        ? window.innerWidth / 2\n        : rect.width / 2;\n    const height =\n      this.focusElement !== this.card3dElement\n        ? window.innerHeight / 2\n        : rect.height / 2;\n\n    let finalX: number = 0,\n      finalY: number = 0;\n\n    if (\"gyroscopie\" in event) {\n      if (!this.gyroOrigin) {\n        this.gyroOrigin = {\n          x: event.clientX,\n          y: event.clientY,\n        };\n      }\n\n      finalX = (this.gyroOrigin.x - event.clientX) * config.delta;\n      finalY = (this.gyroOrigin.y - event.clientY) * config.delta;\n    } else {\n      if (config.axis !== \"y\") {\n        finalX = (x / width) * config.delta;\n      }\n\n      if (config.axis !== \"x\") {\n        finalY = (y / height) * config.delta;\n      }\n    }\n\n    //we update the glare\n    if (config.glare) {\n      const angle =\n        Math.atan2(event.clientX - middleX, -(event.clientY - middleY)) *\n        (180 / Math.PI);\n      const glareSize =\n        (rect.width > rect.height ? rect.width : rect.height) * 2;\n      this.glareElement.style.opacity = config.glareOpacity.toString();\n      this.glareElement.style.left = \"50%\";\n      this.glareElement.style.top = \"50%\";\n      this.glareElement.style.width = glareSize + \"px\";\n      this.glareElement.style.height = glareSize + \"px\";\n      this.glareElement.style.transform = `rotate(${angle}deg) translate(-50%, -50%)`;\n      this.glareElement.style.display = \"block\";\n    }\n\n    //we apply the transformation to the card\n    this.card3dElement.style.transform = `\n        perspective(${config.perspective}px) \n        rotateX(${finalY * reverse}deg) \n        rotateY(${finalX * reverse}deg)\n        scale(${config.scale})\n        `;\n  }\n\n  /**\n   * Event that handle when mouse out of the card\n   * @param event\n   */\n  private mouseout() {\n    this.card3dElement.style.transition = \"0.5s ease\";\n    this.card3dElement.style.transform = \"\";\n    if (this.glareElement) this.glareElement.style.opacity = \"0\";\n  }\n}\n\nexport { Card3d, Card3dElements, defaultConfig };\n","import { Card3dElements } from \"core/card3d\";\r\n\r\n/**\r\n * Parse boolean from attribute\r\n * @param str\r\n * @returns\r\n */\r\nfunction parseBooleanAttribute(str: string): boolean {\r\n  return str !== null && str !== undefined && (str === \"\" || str === \"true\");\r\n}\r\n\r\n/**\r\n * Parse float from attribute\r\n * @param str\r\n * @returns\r\n */\r\nfunction parseFloatAttrbiutes(str: string): number {\r\n  const nb = parseFloat(str);\r\n  return isNaN(nb) || typeof nb !== \"number\" ? undefined : nb;\r\n}\r\n\r\n/**\r\n * Find the card index\r\n * @param cardElement\r\n * @returns\r\n */\r\nfunction findCardIndex(cardElement: HTMLElement | Node) {\r\n  return Card3dElements.findIndex((e) => e.element === cardElement);\r\n}\r\n\r\nexport { parseBooleanAttribute, parseFloatAttrbiutes, findCardIndex };\r\n","import Config from \"../types/config\";\r\nimport {\r\n  findCardIndex,\r\n  parseBooleanAttribute,\r\n  parseFloatAttrbiutes,\r\n} from \"../utils\";\r\nimport { Card3d, defaultConfig } from \"./card3d\";\r\n\r\n/**\r\n * Set the configuration based on the attributes\r\n * @returns\r\n */\r\nfunction getConfigFromAttributes(element: HTMLElement): Config {\r\n  const attr = element.dataset;\r\n\r\n  const fullPageListening = parseBooleanAttribute(attr.card3dFullPageListening);\r\n  const noReset = parseBooleanAttribute(attr.card3dNoReset);\r\n  const glare = parseBooleanAttribute(attr.card3dGlare);\r\n  const reverse = parseBooleanAttribute(attr.card3dReverse);\r\n  const stop = parseBooleanAttribute(attr.card3dStop);\r\n  const gyroscopie = parseBooleanAttribute(attr.card3dGyroscopie);\r\n\r\n  const delta = parseFloatAttrbiutes(attr.card3dDelta) ?? defaultConfig.delta;\r\n  const perspective =\r\n    parseFloatAttrbiutes(attr.card3dPerspective) ?? defaultConfig.perspective;\r\n  const startX =\r\n    parseFloatAttrbiutes(attr.card3dStartX) ?? defaultConfig.startX;\r\n  const startY =\r\n    parseFloatAttrbiutes(attr.card3dStartY) ?? defaultConfig.startY;\r\n  const glareOpacity =\r\n    parseFloatAttrbiutes(attr.card3dGlare) ?? defaultConfig.glareOpacity;\r\n  const scale = parseFloatAttrbiutes(attr.card3dScale) ?? defaultConfig.scale;\r\n\r\n  let axis: Config[\"axis\"] = \"all\";\r\n  if (attr.card3dAxis === \"x\") {\r\n    axis = \"x\";\r\n  } else if (attr.card3dAxis === \"y\") {\r\n    axis = \"y\";\r\n  }\r\n\r\n  return {\r\n    gyroscopie,\r\n    stop,\r\n    scale,\r\n    delta,\r\n    axis,\r\n    noReset,\r\n    reverse,\r\n    fullPageListening,\r\n    perspective,\r\n    startX,\r\n    startY,\r\n    glare,\r\n    glareOpacity,\r\n  };\r\n}\r\n\r\n/**\r\n * Check the card and create the card\r\n * @param card3dList\r\n * @returns\r\n */\r\nfunction Card3dAttributesHandler(\r\n  card3dList: HTMLElement[] | NodeListOf<HTMLElement>\r\n) {\r\n  for (const card3d of card3dList) {\r\n    const alreadySetup = findCardIndex(card3d) !== -1;\r\n    const isNotCard3d = card3d.dataset?.card3d === undefined;\r\n    const isStopped = parseBooleanAttribute(card3d.dataset?.card3dStop);\r\n\r\n    if (alreadySetup || isStopped || isNotCard3d) continue;\r\n\r\n    new Card3d(card3d, getConfigFromAttributes(card3d));\r\n  }\r\n}\r\n\r\nexport { Card3dAttributesHandler, getConfigFromAttributes };\r\n","import Card3dObserver from \"core/observer\";\r\nimport { Card3dAttributesHandler } from \"core/attr-handler\";\r\nimport { Card3d } from \"core/card3d\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  Card3dAttributesHandler(document.querySelectorAll(\"[data-card3d]\"));\r\n  Card3dObserver();\r\n});\r\n\r\nexport default Card3d;\r\n","import { findCardIndex, parseBooleanAttribute } from \"utils\";\r\nimport { Card3dElements } from \"./card3d\";\r\nimport {\r\n  Card3dAttributesHandler,\r\n  getConfigFromAttributes,\r\n} from \"./attr-handler\";\r\n\r\n/**\r\n * Create the observer to add new card, remove card or change card on attribute change\r\n */\r\nfunction Card3dObserver() {\r\n  const observerDOM = new MutationObserver(function (mutations) {\r\n    const addedNodes: HTMLElement[] = [];\r\n\r\n    for (const mutation of mutations ?? []) {\r\n      //attributes changed\r\n      if (\r\n        mutation.type === \"attributes\" &&\r\n        mutation.attributeName.includes(\"data-card3d\")\r\n      ) {\r\n        const element = mutation.target as HTMLElement;\r\n        const cardIndex = findCardIndex(element);\r\n\r\n        const isNewCard =\r\n          parseBooleanAttribute(element.dataset?.card3d) && cardIndex === -1;\r\n        const cardAlreadyExist = cardIndex !== -1;\r\n\r\n        if (isNewCard) {\r\n          addedNodes.push(element);\r\n        } else if (cardAlreadyExist) {\r\n          Card3dElements[cardIndex].instance.updateConfig(\r\n            getConfigFromAttributes(Card3dElements[cardIndex].element)\r\n          );\r\n        }\r\n      }\r\n\r\n      //added nodes\r\n      for (const addedNode of mutation.addedNodes) {\r\n        addedNodes.push(addedNode as HTMLElement);\r\n      }\r\n\r\n      //removed nodes\r\n      for (const removedNode of mutation.removedNodes) {\r\n        const elementIndex = findCardIndex(removedNode);\r\n        if (elementIndex !== -1) Card3dElements.splice(elementIndex, 1);\r\n      }\r\n    }\r\n\r\n    if (addedNodes.length > 0) Card3dAttributesHandler(addedNodes);\r\n  });\r\n\r\n  observerDOM.observe(window.document.documentElement, {\r\n    childList: true,\r\n    subtree: true,\r\n    attributes: true,\r\n  });\r\n}\r\n\r\nexport default Card3dObserver;\r\n"],"names":["Card3dElements","defaultConfig","delta","perspective","startX","startY","glareOpacity","axis","scale","Card3d","constructor","card3dElement","config","this","gyroOrigin","push","element","instance","Object","assign","stop","start","updateConfig","removeEventListener","focusElement","eventMouseMoove","eventMouseOut","gyroscopie","window","eventDeviceOrientation","setupEventListener","event","mousemove","mouseout","addEventListener","noReset","gyro","rotateZ","beta","rotateX","gamma","clientY","clientX","cardIndex","findCardIndex","splice","setAttribute","reset","style","transform","transition","glareElement","remove","applyGlare","document","createElement","appendChild","fullPageListening","body","glare","overflow","willChange","isConnected","reverse","rect","getBoundingClientRect","middleWidth","width","middleHeight","height","middleX","left","middleY","top","x","y","innerWidth","innerHeight","finalX","finalY","angle","Math","atan2","PI","glareSize","opacity","toString","display","parseBooleanAttribute","str","parseFloatAttrbiutes","nb","parseFloat","isNaN","undefined","cardElement","findIndex","e","getConfigFromAttributes","attr","dataset","card3dFullPageListening","card3dNoReset","card3dGlare","card3dReverse","card3dStop","card3dGyroscopie","_a","card3dDelta","_b","card3dPerspective","_c","card3dStartX","_d","card3dStartY","_e","_f","card3dScale","card3dAxis","Card3dAttributesHandler","card3dList","card3d","alreadySetup","isNotCard3d","isStopped","querySelectorAll","MutationObserver","mutations","addedNodes","mutation","type","attributeName","includes","target","cardAlreadyExist","addedNode","removedNode","removedNodes","elementIndex","length","observe","documentElement","childList","subtree","attributes"],"mappings":"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"}